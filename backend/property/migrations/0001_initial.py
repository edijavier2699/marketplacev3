# Generated by Django 4.2.15 on 2024-08-29 15:25

import django.contrib.postgres.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('details', models.JSONField(blank=True, help_text='Detailed description and specifics of the property.', null=True)),
                ('bedrooms', models.IntegerField(help_text='Number of bedrooms in the property.')),
                ('bathrooms', models.DecimalField(decimal_places=1, help_text='Number of bathrooms in the property, supporting half-baths as decimals.', max_digits=2)),
                ('projected_annual_return', models.DecimalField(blank=True, decimal_places=2, help_text='The projected annual return as a percentage.', max_digits=5, null=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='The sale or list price of the property.', max_digits=10)),
                ('location', models.CharField(max_length=255)),
                ('country', models.CharField(blank=True, help_text='The country where the property is located.', max_length=100, null=True)),
                ('property_type', models.CharField(help_text='The type of property, such as apartment, house, or commercial.', max_length=100)),
                ('size', models.DecimalField(decimal_places=2, help_text='Total interior square footage of the property.', max_digits=6)),
                ('year_built', models.IntegerField(help_text='The year in which the property was originally constructed.')),
                ('image', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=500), blank=True, help_text='A list of URLs pointing to images of the property.', null=True, size=None)),
                ('video_urls', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=500), blank=True, help_text='A list of URLs pointing to videos of the property.', null=True, size=None)),
                ('amenities', models.JSONField(blank=True, help_text='JSON formatted list of property amenities such as pool, gym, pet-friendly, etc.', null=True)),
                ('total_investment_value', models.DecimalField(decimal_places=2, help_text='Total amount of money invested in the property, including purchase and renovation costs.', max_digits=12)),
                ('underlying_asset_price', models.DecimalField(decimal_places=2, help_text='The base price of the property without additional fees or expenses.', max_digits=12)),
                ('closing_costs', models.DecimalField(decimal_places=2, help_text='Expenses paid at the time of finalizing the property deal, such as legal and escrow fees.', max_digits=10)),
                ('upfront_fees', models.DecimalField(decimal_places=2, help_text='Initial fees paid to the platform or DAO for listing and other administrative services.', max_digits=10)),
                ('operating_reserve', models.DecimalField(decimal_places=2, help_text='Funds set aside to cover the ongoing operational costs and emergency expenses.', max_digits=10)),
                ('projected_annual_yield', models.DecimalField(decimal_places=2, help_text='The projected annual return on investment as a percentage.', max_digits=5)),
                ('projected_rental_yield', models.DecimalField(decimal_places=2, help_text="The projected annual return from rent as a percentage of the property's price.", max_digits=5)),
                ('annual_gross_rents', models.DecimalField(decimal_places=2, help_text='The total rental income expected to be received annually.', max_digits=12)),
                ('property_taxes', models.DecimalField(decimal_places=2, help_text="Taxes charged annually based on the property's assessed value.", max_digits=10)),
                ('homeowners_insurance', models.DecimalField(decimal_places=2, help_text='Annual insurance cost covering potential damage to the property.', max_digits=10)),
                ('property_management', models.DecimalField(decimal_places=2, help_text='Annual fee paid to a management company for managing the property.', max_digits=10)),
                ('dao_administration_fees', models.DecimalField(decimal_places=2, help_text='Annual fees paid to the DAO for administrative services.', max_digits=10)),
                ('annual_cash_flow', models.DecimalField(decimal_places=2, help_text='Net annual revenue from the property, after deducting all expenses.', max_digits=12)),
                ('monthly_cash_flow', models.DecimalField(decimal_places=2, help_text='Net income from the property calculated on a monthly basis.', max_digits=12)),
                ('projected_annual_cash_flow', models.DecimalField(decimal_places=2, help_text='Estimated yearly cash flow based on projected rental and operational costs.', max_digits=12)),
                ('total_tokens', models.BigIntegerField(help_text='Total number of tokens issued for the property, representing ownership shares.')),
                ('tokensSold', models.BigIntegerField(default=0, help_text='Current number of tokens sold.')),
                ('token_price', models.DecimalField(decimal_places=2, help_text='Price per token, reflecting the value of a fractional ownership share.', max_digits=10)),
                ('blockchain_address', models.CharField(default='0xINVALID_DEFAULT_ADDRESS', help_text="Blockchain address where the property's tokens are managed and transactions are recorded.", max_length=255)),
                ('legal_documents_url', models.URLField(blank=True, help_text='URL to access legal documents related to this property.', max_length=500, null=True)),
            ],
        ),
    ]
